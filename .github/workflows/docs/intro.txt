pytket-extensions
=================

.. image:: Quantinuum_logo.png
   :width: 160px
   :align: right


These extensions enable ``pytket`` to interface with different hardware platforms and classical simulators. One can also access additional quantum devices and simulators via the cloud through the extensions for `Azure <https://cqcl.github.io/pytket-extensions/api/qsharp/api.html#pytket.extensions.qsharp.AzureBackend>`_ and `Braket <https://cqcl.github.io/pytket-braket/api/api.html#pytket.extensions.braket.BraketBackend>`_ . 
In pytket a ``Backend`` represents a connection to a QPU (Quantum Processing Unit) or simulator for processing quantum circuits. The types of ``Backend`` available in pytket are the following.

Types of Backend
================

* **QPUs** - These are real quantum computers that return shots based results. E.g the `QuantinuumBackend <https://cqcl.github.io/pytket-quantinuum/api/>`_ .
* **Cloud Access** - Cloud backends allow pytket to interface with cloud platforms to access additional QPUs and simulators. E.g `BraketBackend <https://cqcl.github.io/pytket-braket/api/api.html#pytket.extensions.braket.BraketBackend>`_ .
* **Emulators** - These classically simulate a circuit and produce shots based results. Sometimes emulators use a noise model and have connectivity constraints to emulate real QPUs. E.g. `IBMQEmulatorBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.IBMQEmulatorBackend>`_ .
* **Statevector Simulators** - Calculates the pure quantum state prepared by a circuit returning a vector/ndarray. Examples of statevector simulators are the `ForestStateBackend <https://cqcl.github.io/pytket-extensions/api/pyquil/api.html#pytket.extensions.pyquil.ForestStateBackend>`_ and the `AerStateBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.AerStateBackend>`_ . 
* **Unitary Simulators** - Unitary simulators calculate the unitary operator that is applied by a circuit. A unitary matrix/ndarray is returned `AerUnitaryBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.AerUnitaryBackend>`_ is an example of such a simulator.
* **Density Matrix Simulators** - These simulators compute the density matrix prepared by a circuit. The result can be a statistical mixture of states in contrast to statevector simulation. E.g. `CirqDensityMatrixSampleBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqDensityMatrixSampleBackend>`_ .
* **Other specialised simulators** - There are extensions for simulating specific types of circuit. For instance the `SimplexBackend <https://cqcl.github.io/pytket-extensions/api/pysimplex/api.html#pytket.extensions.pysimplex.SimplexBackend>`_ is designed to simulate Clifford circuits. 

A full list of available pytket backends is shown below.

QPUs
====

`IBMQBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.IBMQBackend>`_
- A backend for running circuits on remote IBMQ devices.

`IonQBackend <https://cqcl.github.io/pytket-extensions/api/ionq/api.html#pytket.extensions.ionq.IonQBackend>`_
- Interface to an IonQ device.

`ForestBackend <https://cqcl.github.io/pytket-extensions/api/pyquil/api.html#pytket.extensions.pyquil.ForestBackend>`_
- Interface to a Rigetti device.

`AQTBackend <https://cqcl.github.io/pytket-extensions/api/aqt/api.html#pytket.extensions.aqt.AQTBackend>`_
- Interface to an AQT device or simulator.

`QuantinuumBackend <https://cqcl.github.io/pytket-quantinuum/api/api.html#pytket.extensions.quantinuum.QuantinuumBackend>`_
- Interface to a Quantinuum device. There are currently two Quantinuum devices offered (H1-1 and H1-2).

Cloud access
============

`AzureBackend <https://cqcl.github.io/pytket-extensions/api/qsharp/api.html#pytket.extensions.qsharp.AzureBackend>`_
- Backend for running circuits remotely using Azure Quantum devices and simulators.

`BraketBackend <https://cqcl.github.io/pytket-braket/api/api.html#pytket.extensions.braket.BraketBackend>`_
- Interface to Amazon Braket service.

Emulators
=========

`IBMQEmulatorBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.IBMQEmulatorBackend>`_
- A backend which uses the AerBackend to emulate the behavior of IBMQBackend.

`QuantinuumBackend <https://cqcl.github.io/pytket-quantinuum/api/api.html#pytket.extensions.quantinuum.QuantinuumBackend>`_
- The QuantinuumBackend has two available emulators namely H1-1E and H1-2E. These are device specific emulators for the H1-1 and H1-2 devices. These emualtors run remotely on a server.

Statevector simulators
=======================

`CirqStateSampleBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqStateSampleBackend>`_
- Backend for Cirq statevector simulator sampling.

`CirqStateSimBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqStateSimBackend>`_
- Backend for Cirq statevector simulator state return.

`AerStateBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.AerStateBackend>`_
- Backend for running simulations on the Qiskit Aer Statevector simulator.

`ForestStateBackend <https://cqcl.github.io/pytket-extensions/api/pyquil/api.html#pytket.extensions.pyquil.ForestStateBackend>`_
- State-based interface to a Rigetti device.

`ProjectQBackend <https://cqcl.github.io/pytket-extensions/api/projectq/api.html#pytket.extensions.projectq.ProjectQBackend>`_
- Backend for running statevector simulations on the ProjectQ simulator.

Unitary simulators
==================

`AerUnitaryBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.AerUnitaryBackend>`_
- Backend for running simulations on the Qiskit Aer Unitary simulator.

Density matrix simulator
========================

`CirqDensityMatrixSampleBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqDensityMatrixSampleBackend>`_
- Backend for Cirq density matrix simulator sampling.

`CirqDensityMatrixSimBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqDensityMatrixSimBackend>`_
- Backend for Cirq density matrix simulator density_matrix return.

Clifford simulator
==================

`CirqCliffordSampleBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqCliffordSampleBackend>`_
- Backend for Cirq Clifford simulator sampling.

`CirqCliffordSimBackend <https://cqcl.github.io/pytket-extensions/api/cirq/api.html#pytket.extensions.cirq.CirqCliffordSimBackend>`_
- Backend for Cirq Clifford simulator state return.

`SimplexBackend <https://cqcl.github.io/pytket-extensions/api/pysimplex/api.html#pytket.extensions.pysimplex.SimplexBackend>`_
- Backend for simulating Clifford circuits using pysimplex.

`StimBackend <https://cqcl.github.io/pytket-extensions/api/stim/api.html#pytket.extensions.stim.StimBackend>`_
- Backend for simulating Clifford circuits using Stim.

Other
=====

`AerBackend <https://cqcl.github.io/pytket-extensions/api/qiskit/api.html#pytket.extensions.qiskit.AerBackend>`_
- Backend for running simulations on the Qiskit Aer QASM simulator. This simulation runs locally on the users computer.

`QulacsBackend <https://cqcl.github.io/pytket-extensions/api/qulacs/api.html#pytket.extensions.qulacs.QulacsBackend>`_
- Backend for running simulations on the Qulacs simulator.

`QsharpSimulatorBackend <https://cqcl.github.io/pytket-extensions/api/qsharp/api.html#pytket.extensions.qsharp.QsharpSimulatorBackend>`_
- Backend for simulating a circuit using the QDK.

`QsharpToffoliSimulatorBackend <https://cqcl.github.io/pytket-extensions/api/qsharp/api.html#pytket.extensions.qsharp.QsharpToffoliSimulatorBackend>`_
- Backend for simulating a Toffoli circuit using the QDK.

`QsharpEstimatorBackend <https://cqcl.github.io/pytket-extensions/api/qsharp/api.html#pytket.extensions.qsharp.QsharpEstimatorBackend>`_
- Backend for estimating resources of a circuit using the QDK.

.. _pytket: https://cqcl.github.io/tket/pytket/api/
.. _Quantinuum: https://quantinuum.com
