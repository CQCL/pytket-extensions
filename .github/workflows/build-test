#!/bin/bash
set -evu

# Usage:
#
# build-test [mypy|nomypy]
#
# Arguments:
# - mypy: include mypy check ("mypy" or "nomypy")
#
# Environment variables used:
# - MODULES_TO_TEST: space-separated list of modules to test
# - GITHUB_WORKSPACE: workspace directory
#
# WARNING: running this locally will delete any local files that
# aren't strictly part of the git tree, including gitignored files!

MYPY=$1

PLAT=`python -c 'import platform; print(platform.system())'`

PYVER=`python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'`

git clean -dfx

echo "Modules to test: ${MODULES_TO_TEST}"

MODULEDIR="${GITHUB_WORKSPACE}/modules"

ARTIFACTSDIR=${GITHUB_WORKSPACE}/wheelhouse

rm -rf ${ARTIFACTSDIR} && mkdir ${ARTIFACTSDIR}

python -m pip install --upgrade pip wheel

# arguments: (module, platform, python version)
# output: "0" if unsupported, else "1"
function unsupported() {
    local module=$1
    local plat=$2
    local pyver=$3

    if [[ "$pyver" != "3.10" ]]
    then
        echo 1 ; return
    fi

    # https://github.com/Qiskit/qiskit/issues/1343
    if [[ "$module" = "pytket-qiskit" ]]
    then
        echo 0 ; return
    fi

    if [[ "$module" = "pytket-qsharp" && $plat = "Windows" ]]
    then
        echo 0 ; return
    fi

    if [[ "$module" = "pytket-qulacs" && $plat != "Linux" ]]
    then
        echo 0 ; return
    fi

    if [[ "$module" = "pytket-stim" && $plat = "Windows" ]]
    then
        echo 0 ; return
    fi

    echo 1 ; return
}

# Generate and install packages:
for MODULE in $MODULES_TO_TEST; do

    UNSUPPORTED = $(unsupported ${MODULE} ${PLAT} ${PYVER})

    echo "Install: UNSUPPORTED:" ${UNSUPPORTED}

    if [[ ${UNSUPPORTED} ]]
    then
        echo "continuing..."
        continue
    fi

    echo "${MODULE}..."
    cd ${MODULEDIR}/${MODULE}
    python setup.py sdist
    for sdist in dist/*.tar.gz ; do
        python -m pip install $sdist
        cp $sdist ${ARTIFACTSDIR}
    done
done

# Test and mypy:
if [[ "${MYPY}" = "mypy" ]]
then
    python -m pip install --upgrade mypy
fi
for MODULE in $MODULES_TO_TEST; do

    # https://github.com/CQCL/pytket-extensions/issues/180 and
    # https://github.com/microsoft/iqsharp/issues/512
    if [[ "${MODULE}" = "pytket-qsharp" && "${PLAT}" = "Windows" ]]
    then
        continue
    fi

    UNSUPPORTED = $(unsupported ${MODULE} ${PLAT} ${PYVER})

    echo "Test: UNSUPPORTED:" ${UNSUPPORTED}

    if [[ ${UNSUPPORTED} ]]
    then
        echo "continuing..."
        continue
    fi

    echo "${MODULE}..."

    cd ${MODULEDIR}/${MODULE}/tests

    python -m pip install --pre -r test-requirements.txt

    if [[ "${MODULE}" = "pytket-qsharp" && "${PLAT}" != "Darwin" ]]
    then
        dotnet iqsharp install --user
    fi

    if [[ "${MODULE}" = "pytket-qulacs" && "${PYVER}" != "3.10" ]]
    then
        pip install -U openfermion
    fi

    pytest --doctest-modules

    if [[ "${MYPY}" = "mypy" ]]
    then
        ${MODULEDIR}/mypy-check ${MODULEDIR}/${MODULE}
    fi

done
