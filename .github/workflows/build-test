#!/bin/bash
set -evu

# Usage:
#
# build-test [mypy|nomypy]
#
# Arguments:
# - mypy: include mypy check ("mypy" or "nomypy")
#
# Environment variables used:
# - MODULES_TO_TEST: space-separated list of modules to test
# - GITHUB_WORKSPACE: workspace directory
#
# WARNING: running this locally will delete any local files that
# aren't strictly part of the git tree, including gitignored files!

MYPY=$1

PLAT=`python -c 'import platform; print(platform.system())'`

PYVER=`python -c 'import sys; print(".".join(map(str, sys.version_info[:2])))'`

git clean -dfx

echo "Modules to test: ${MODULES_TO_TEST}"

MODULEDIR="${GITHUB_WORKSPACE}/modules"

ARTIFACTSDIR=${GITHUB_WORKSPACE}/wheelhouse

rm -rf ${ARTIFACTSDIR} && mkdir ${ARTIFACTSDIR}

python -m pip install --upgrade pip wheel

function unsupported() {
    case "$1" in
        pytket-iqm)
            # The iqm-client package is only available for 3.9.
            [[ "${PYVER}" != "3.9" ]] && return
            ;;
        pytket-qiskit)
            # Cannot install qiskit-aer on Windows with 3.10.
            [[ "${PLAT}" == "Windows" && "${PYVER}" == "3.10" ]] && return
            ;;
        pytket-qsharp)
            # Currently qsharp can't be run on Windows: see
            # https://github.com/CQCL/pytket-extensions/issues/180 and
            # https://github.com/microsoft/iqsharp/issues/512 .
            # (And with Python 3.10 it can't even be installed.)
            [[ "${PLAT}" == "Windows" ]] && return
            ;;
        pytket-qulacs)
            # Cannot install qulacs on MacOS or Windows with 3.10.
            [[ "${PLAT}" != "Linux" && "${PYVER}" == "3.10" ]] && return
            ;;
        *)
            false
            ;;
    esac
}

# Generate and install packages:
for MODULE in $MODULES_TO_TEST; do
    if ! (unsupported ${MODULE}) ; then
        echo "${MODULE}..."
        cd ${MODULEDIR}/${MODULE}
        python setup.py sdist
        for sdist in dist/*.tar.gz ; do
            python -m pip install $sdist
            cp $sdist ${ARTIFACTSDIR}
        done
    fi
done

# Test and mypy:
if [[ "${MYPY}" = "mypy" ]]
then
    python -m pip install --upgrade mypy
fi
for MODULE in $MODULES_TO_TEST; do
    if ! (unsupported ${MODULE}) ; then
        echo "${MODULE}..."

        cd ${MODULEDIR}/${MODULE}/tests

        python -m pip install --pre -r test-requirements.txt

        if [[ "${MODULE}" = "pytket-qsharp" && "${PLAT}" != "Darwin" ]]
        then
            dotnet iqsharp install --user
        fi

        pytest --doctest-modules

        if [[ "${MYPY}" = "mypy" ]]
        then
            ${MODULEDIR}/mypy-check ${MODULEDIR}/${MODULE}
        fi
    fi
done
