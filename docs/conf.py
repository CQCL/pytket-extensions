# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- Project information -----------------------------------------------------

project = "pytket extensions"
copyright = "2021, Cambridge Quantum Computing Ltd"
author = "Cambridge Quantum Computing Ltd"

# The short X.Y version
# version = "0.7"
# The full version, including alpha/beta/rc tags
# release = "0.7.1"


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx_autodoc_annotation",
    "sphinx.ext.intersphinx",
    "sphinx.ext.mathjax",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "pytketextensionsdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "pytket_extensions.tex",
        "pytket extensions Documentation",
        "Cambridge Quantum Computing Ltd",
        "manual",
    ),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, "pytket extensions", "pytket extensions Documentation", [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "pytket extensions",
        "pytket extensions Documentation",
        author,
        "pytket extensions",
        "Extension modules for CQC's pytket",
        "Miscellaneous",
    ),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# -- Extension configuration -------------------------------------------------
pytketdoc_base = "https://cqcl.github.io/pytket/build/html/"
intersphinx_mapping = {
    "https://docs.python.org/": None,
    pytketdoc_base: None,
    "https://qiskit.org/documentation/": None,
    "http://docs.qulacs.org/en/latest/": None,
}

autodoc_member_order = "groupwise"

# The following code is for resolving broken hyperlinks in the doc.

from sphinx.application import Sphinx
from docutils import nodes
from docutils.nodes import Element, TextElement
from sphinx.environment import BuildEnvironment
from urllib.parse import urljoin
import re
from typing import Any, Dict, List, Optional

# Mappings for broken hyperlinks that intersphinx cannot resolve
external_url_mapping = {
    "Device": urljoin(pytketdoc_base, "device.html#pytket.device.Device"),
    "BasePass": urljoin(pytketdoc_base, "passes.html#pytket.passes.BasePass"),
    "Predicate": urljoin(pytketdoc_base, "predicates.html#pytket.predicates.Predicate"),
    "ResultHandle": urljoin(
        pytketdoc_base,
        "backends.html#pytket.backends.resulthandle.ResultHandle",
    ),
    "BackendResult": urljoin(
        pytketdoc_base,
        "backends.html#pytket.backends.backendresult.BackendResult",
    ),
    "Circuit": urljoin(pytketdoc_base, "circuit_class.html#pytket.circuit.Circuit"),
    "BasisOrder": urljoin(pytketdoc_base, "circuit.html#pytket.circuit.BasisOrder"),
    "QubitPauliOperator": urljoin(
        pytketdoc_base, "utils.html#pytket.utils.QubitPauliOperator"
    ),
    "QubitPauliString": urljoin(
        pytketdoc_base, "pauli.html#pytket.pauli.QubitPauliString"
    ),
}

# Correct mappings for intersphinx to resolve
custom_internal_mapping = {
    "pytket.utils.outcomearray.OutcomeArray": "pytket.utils.OutcomeArray",
    "pytket.utils.operators.QubitPauliOperator": "pytket.utils.QubitPauliOperator",
    "pytket.backends.backend.Backend": "pytket.backends.Backend",
    "qiskit.dagcircuit.dagcircuit.DAGCircuit": "qiskit.dagcircuit.DAGCircuit",
    "qiskit.providers.basebackend.BaseBackend": "qiskit.providers.BaseBackend",
    "qiskit.qobj.qasm_qobj.QasmQobj": "qiskit.qobj.QasmQobj",
    "qiskit.result.result.Result": "qiskit.result.Result",
}


def add_reference(
    app: Sphinx, env: BuildEnvironment, node: Element, contnode: TextElement
) -> Optional[nodes.reference]:
    # Fix references in docstrings that are inherited from the base pytket.backends.Backend class.
    mapping = app.config.external_url_mapping
    if node.astext() in mapping:
        newnode = nodes.reference(
            "",
            "",
            internal=False,
            refuri=mapping[node.astext()],
            reftitle=node.get("reftitle", node.astext()),
        )
        newnode.append(contnode)
        return newnode
    return None


def correct_signature(
    app: Sphinx,
    what: str,
    name: str,
    obj: Any,
    options: Dict,
    signature: str,
    return_annotation: str,
) -> (str, str):

    new_signature = signature
    new_return_annotation = return_annotation
    for k, v in app.config.custom_internal_mapping.items():
        if signature is not None:
            new_signature = new_signature.replace(k, v)
        if return_annotation is not None:
            new_return_annotation = new_return_annotation.replace(k, v)
    # e.g. Replace <CXConfigType.Snake: 0> by CXConfigType.Snake to avoid silent failure in later stages.
    if new_signature is not None:
        enums_signature = re.findall(r"<.+?\: \d+>", new_signature)
        for e in enums_signature:
            new_signature = new_signature.replace(e, e[1 : e.find(":")])

    if new_return_annotation is not None:
        enums_return = re.findall(r"<.+?\: \d+>", new_return_annotation)
        for e in enums_return:
            new_return_annotation = new_return_annotation.replace(e, e[1 : e.find(":")])

    return new_signature, new_return_annotation


def setup(app):
    app.add_config_value("custom_internal_mapping", {}, "env")
    app.add_config_value("external_url_mapping", {}, "env")
    app.connect("missing-reference", add_reference)
    app.connect("autodoc-process-signature", correct_signature)
